import java.util.Arrays;import java.util.List;public class Blake {	int NUMBER_OF_ROUNDS=14;	//Переменные цепочки h = h0,...,h7 (8 слов)	protected int[] h = new int[8];	//Блок сообщения v = m0,...,m15;	protected int[] v = new int[16];	// Значение соли s = s0,...,s3	protected int[] s = {0,0,0,0};	// Значение счётчика t = t0,t1.	protected int[] t = {0,0};	// начальные константы, т.н. INITIAL VALUES (IV):	protected static final int[] initialvalue = {			0x6A09E667,			0xBB67AE85,			0x3C6EF372,			0xA54FF53A,			0x510E527F,			0x9B05688C,			0x1F83D9AB,			0x5BE0CD19	};	// 16 констант (Первые цифры числа пи):	protected int[] c = {			0x243F6A88,			0x85A308D3,			0x13198A2E,			0x03707344,			0xA4093822,			0x299F31D0,			0x082EFA98,			0xEC4E6C89,			0x452821E6,			0x38D01377,			0xBE5466CF,			0x34E90C6C,			0xC0AC29B7,			0xC97C50DD,			0x3F84D5B5,			0xB5470917	};	// Константы перестановки {0,...,15} (используются во всех функциях BLAKE):	private static final int[][] perm =			{					{0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15},					{14, 10,  4,  8,  9, 15, 13,  6,  1, 12,  0,  2, 11,  7,  5,  3},					{11,  8 ,12 , 0  ,5 , 2 ,15 ,13, 10 ,14 , 3 , 6 , 7 , 1 , 9 , 4},					{7,  9 , 3 , 1 ,13 ,12 ,11 ,14 , 2 , 6 , 5 ,10 , 4 , 0 ,15 , 8},					{9 , 0 , 5 , 7 , 2 , 4 ,10, 15 ,14 , 1 ,11 ,12 , 6 , 8 , 3 ,13},					{2, 12 , 6 ,10 , 0 ,11 , 8 , 3 , 4, 13 , 7 , 5 ,15, 14,  1 , 9},					{12,  5 , 1, 15, 14, 13 , 4 ,10 , 0 , 7 , 6 , 3 , 9 , 2 , 8 ,11},					{13, 11 , 7 ,14, 12,  1 , 3 , 9 , 5 , 0, 15,  4 , 8 , 6 , 2 ,10},					{6 ,15 ,14  ,9, 11 , 3 , 0 , 8, 12 , 2 ,13 , 7 , 1 , 4, 10 , 5},					{10 , 2 , 8 , 4 , 7 , 6 , 1 , 5 ,15, 11 , 9 ,14  ,3, 12, 13 , 0},					{0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15},					{14, 10,  4,  8,  9, 15, 13,  6,  1, 12,  0,  2, 11,  7,  5,  3},					{11,  8 ,12 , 0  ,5 , 2 ,15 ,13, 10 ,14 , 3 , 6 , 7 , 1 , 9 , 4},					{7,  9 , 3 , 1 ,13 ,12 ,11 ,14 , 2 , 6 , 5 ,10 , 4 , 0 ,15 , 8},					{9 , 0 , 5 , 7 , 2 , 4 ,10, 15 ,14 , 1 ,11 ,12 , 6 , 8 , 3 ,13},					{2, 12 , 6 ,10 , 0 ,11 , 8 , 3 , 4, 13 , 7 , 5 ,15, 14,  1 , 9}			};	private static final int[][] Gindex = {			//G0(v0, v4, v8 , v12)			//G1(v1, v5, v9 , v13)			//G2(v2, v6, v10, v14)			//G3(v3, v7, v11, v15)			//G4(v0, v5, v10, v15)			//G5(v1, v6, v11, v12)			//G6(v2, v7, v8 , v13)			//G7(v3, v4, v9 , v14)			{0,4,8,12},			{1,5,9,13},			{2,6,10,14},			{3,7,11,15},			{0,5,10,15},			{1,6,11,12},			{2,7,8,13},			{3,4,9,14}	};	public Blake() {}	public static void main(String[] args) {}	//Метод для старта хеш-функции	public String start(byte[] data){		initialize();		//Паддинг входных байт		List<Block512> blocks = Block512.fromByteArray(data);		for(Block512 b : blocks){			update(b);		}		return Support.toHex(Support.intAr2byteAr(h));	}	//инициализация раундов	protected void update(Block512 b) {		int[] block=b.toIntArr();		t[0] += (b.dataBytes*8);		updateVStates();		for(int i = 0;i<NUMBER_OF_ROUNDS;i++){			round(i,block);		}		finalStep();	}	// Раундовая функция	// Раунд — это операция над состоянием, которая производит вычисления, разбитые на следующие блоки:	private void round(int r, int[] m) {		//G0(v0, v4, v8 , v12) G1(v1, v5, v9 , v13) G2(v2, v6, v10, v14) G3(v3, v7, v11, v15)		//G4(v0, v5, v10, v15) G5(v1, v6, v11, v12) G6(v2, v7, v8 , v13) G7(v3, v4, v9 , v14)		G(0,r,m);		G(1,r,m);		G(2,r,m);		G(3,r,m);		G(4,r,m);		G(5,r,m);		G(6,r,m);		G(7,r,m);	}	// Последний шаг	//После всех раундов новое значение переменных цепочки h'0,...,h'7 вычисляется из переменных v0...v15	// матрицы состояния, входных переменных h и из соли s:	private void finalStep() {		h[0] = h[0] ^ s[0] ^ v[0] ^ v[8];		h[1] = h[1] ^ s[1] ^ v[1] ^ v[9];		h[2] = h[2] ^ s[2] ^ v[2] ^ v[10];		h[3] = h[3] ^ s[3] ^ v[3] ^ v[11];		h[4] = h[4] ^ s[0] ^ v[4] ^ v[12];		h[5] = h[5] ^ s[1] ^ v[5] ^ v[13];		h[6] = h[6] ^ s[2] ^ v[6] ^ v[14];		h[7] = h[7] ^ s[3] ^ v[7] ^ v[15];	}	// Раунд — это операция над состоянием	private void G(int i,int r, int[] m){		int A = Gindex[i][0];		int B = Gindex[i][1];		int C = Gindex[i][2];		int D = Gindex[i][3];		// a ← a + b + (mj ⊕ ck)		this.v[A] = this.v[A] + this.v[B] + ( m[perm[r][2*i]] ^ c[perm[r][(2*i)+1]]);		// d ← (d ⊕ a) >>> 16		this.v[D] = Integer.rotateRight((this.v[D] ^ this.v[A]),16);		// c ← c + d		this.v[C] = this.v[C] + this.v[D];		// b ← (b ⊕ c) >>> 12		this.v[B] = Integer.rotateRight((this.v[B] ^ this.v[C]),12);		// a ← a + b + (mk ⊕ cj)		this.v[A] = this.v[A] + this.v[B] + ( m[perm[r][(2*i)+1]] ^ c[perm[r][2*i]]);		// d ← (d ⊕ a) >>> 8		this.v[D] = Integer.rotateRight((this.v[D] ^ this.v[A]),8);		// c ← c + d		this.v[C] = this.v[C] + this.v[D];		// b ← (b ⊕ c) >>> 7		this.v[B] = Integer.rotateRight((this.v[B] ^ this.v[C]),7);	}	protected void initialize() {		h=Arrays.copyOf(initialvalue,8);	}	private void updateVStates() {		v[0] = h[0];		v[1] = h[1];		v[2] = h[2];		v[3] = h[3];		v[4] = h[4];		v[5] = h[5];		v[6] = h[6];		v[7] = h[7];		v[8] = s[0]^c[0];		v[9] = s[1]^c[1];		v[10] = s[2]^c[2];		v[11] = s[3]^c[3];		v[12] = t[0]^c[4];		v[13] = t[0]^c[5];		v[14] = t[1]^c[6];		v[15] = t[1]^c[7];	}}